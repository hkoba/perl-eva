# 以下の文面は、1996年6月30日付けの『古巣における最終版』に
# 添えたもののままで、基本的に手を加えておりません。

----------------------------------------------------------------------

■ EVA -- perl プログラマのための対話的評価(EVAL)/実行環境. 

このプログラムの基本機能は任意の perl の式を評価すること, だ
けです. ◆ただし◆ EVA は実行結果を保持するための疑似スタック
を持っています. この疑似スタックには構造データ(無名HASH, 無名
配列)をそのまま置くことが出来ます. このため,

  * プログラム全体のフローが決まっていない段階

  * 出力のフォーマットが決まっていない段階

におけるプロトタイピング, あるいは使い捨てプログラミングに有
効なのではないかと期待しています. 何にせよ, EVA で何が出来る
か…は, perl で何が出来るか,とほぼ同じ. 使い方次第の道具だと
考えて下さい.

■ 基本的な操作は 2つだけです.

 [1] perl の式をマウスで反転させて, 'Eval' メニューの
     'Evaluate Selection' を選ぶ. (TearOff(*) すると便利)

もしくは, 

 [2] Text widget の中で perl の式を書き, <Control-Return> を
     押す.

です. どちらの場合も, その式が評価され, 結果がスタックに入り
ます.  スタック上の値は, 次の評価の際に '@_' を通して参照する
事が出来ます.

# (*) TearOff とは、メニューをメニューバーから切り放して独立した
#     Window にしてしまうことです。特定のメニュー項目を何度も
#     呼出すときには非常に便利です。
#     メニューを出した時に、一番上にあらわれる『点線』項目を
#     選べば、そのメニューを TearOff できます。

■ 実際には EVA はあなたの入力した式はサブルーチンとして扱
われます. つまり,

 'sub { YOUR_EXPR } '

の形でコンパイルします. そして, その無名サブルーチンに
スタック上の値を渡します.

■ ですので, まず,

  1 .. 8

を評価し, 次に,

  shift;
  my $res = 0;
  $res += shift while @_;
  return $res;

を評価すると, @ARG[1 - N] と書かれた側の Listbox に

  36

が得られるはずです. 

■ 結果の行き先は, 現在の所, 

  オブジェクト  ---    $ARG[0]    のトップ
  それ以外      ---    @ARG[1-N]

になっています. つまり, オブジェクトにメッセージを送る
作業を反復的に行う時に, 一番都合が良くなるような仕組み
にした『つもり』です. 

# もっと便利な操作体系を思い付いたら, 即, 変えます.
# lastX が欲しいけど, 下手な足し方すると, 却って
# 不便になりそうだしなぁ…とか, 山程不満が…



■ それから…現在の所, perl5, perl/Tk の難所は, 
        ◆ 資料の少なさ ◆
だろうと思います. ですがそこは perl ですから, 直接 ス
クリプトを読む, という強行手段があります. そんな訳で, 
ほんの少しだけ, Help 機能をつけてみました. といっても,

  tkpod  の起動
  tkhtml の起動
  tkweb  の起動
  perl のライブラリがあるディレクトリでの grep → タグジャンプ
  スタック上の文字列がファイル名の時, ダブルクリックで Open

だけです. しかも, まだまだ粗い所が山のように有ります.

  (この tkpod, tkhtml は EVA と同一のプロセスになって
   います. ですから, 1個目の起動は遅くても, 2個目以降は
   少しだけましになります. また, 動作中の tkpod や tkhtml
   に対して EVA からメソッドを起動してやる事も可能です…)



----------------------  言い訳… ---------------------

こんな物が他人の役に立つかどうか, 私には分かりません.
人によっては, 『役立たずなおもちゃ』と受け取るでしょう.

ですが, 『論理的に筋の通ったやりかた(解法)』は常に複数
通りある, とも思います. だとしたら, どの解法を選ぶかは, 
結局個人の好みで決まるのではないか… 

そうして, 『沢山, 好き』になった方, 沢山情熱を持った方
が勝ちって事はないでしょうか?

だから私は, 自分が好きなもの, 第一に自分の役に立つ道具…
を作ってみようと思ったのです. 私が主に使って来た道具は,
UNIX 上では perl + zsh + emacs + gnudoit でした. もっと
以前は HP のスタック電卓が, 私の手足でした. これらを用
いて自分が行って来た,

   『日々の, 突発的, 使い捨てプログラミング』

を, より効率良く perl/Tk 一つで達成できるようにしたい,
それが EVA の『最終』目標です.

やり足りない事は, 見ての通り, 山程あります. 構想の何割
が未達成か, 数える気にもなりません. でも, この場合の完
璧主義は『逃げ』に過ぎない, そう考え, post に踏み切りま
した.

 #
 ## 『逃げちゃ駄目だ, 逃げちゃ駄目だ, 逃げちゃ駄目だ…』
 #



------------それから, 世のおたくな同胞達へ.-------------

このプログラムの名前が Evangelion から採られている事は, 
見ての通りです. 

なぜ私は Eva. にこだわるのか. なぜ EVA を作るのか. それは

[1] シンジ君の中に自分『の一部』を見出し, 自分の中に
    シンジ君『の一部』を見出してしまうから.

[2] Eva. から受け取った情熱を放置しておけなかったから.

です.



私の解釈では, すべからく物語はメッセージであり, メッセージを
送る側, 受け取る側は, ともに求道者です.

ANNO 氏は『この物語が終局を迎えた時, 世界も, 彼ら(==オタク)も,
変わっていて欲しい, という願いを込めて, この作品を始めました』
と語った, そう私は聞いています.

そうして, あの尋常ならざる気合いの入った作品を作っている‥
作品は, そして氏の行動は, どういうメッセージなのでしょうか?

   *『オタクのために, アニメを作るな』,
   *『オタクは, バカはアニメを見るな』,

という言葉を, 私は↓このように解釈しています.

   *メッセージの『こころ』よりもまず『アラ』を探してしまう, 
    『受信者*道*』の逸脱者に, いくらメッセージを送っても無駄
    である
   *『メッセージを受信する気の無い者』は, 最初から物語に触れ
     るな

   自分の認識力の枠組 (心の中の, 分類戸棚) を少しも変えようと
   せず, ひたすら元の戸棚の中に他人のメッセージを振り分ける事
   に専念してしまう. もし少しでも送信者側の戸棚に思いを向ける
   事が出来れば, そこから自分の認識を拡張できたかも知れないのに…

ひょっとして, 氏は, 極度に完成度が高く, 謎の多い作品を世に送
る事で, 世の『批評家的おたく』の上に,

  アラ探しして, 見付けたアラは,
  実は, 自分の認識力のアラだった…

という状況を作り出そうと試みているのではあるまいか…,

# そのような状況だけが, 『批評家的おたく』を
# 改心させうる…, そういうことかな, と.

### (大間違いかも知れない ;-)



受け取った情熱は熱すぎて, 走り出さずにはいられない. だけど, 
批評家にはなりたくない. だとしたら, 私に出来る事は??

多分, 土俵を変えて, 送信者になることではないかな,と.

私は絵が描けない. 唄は少し歌うけど, 楽器は弾けない.
で (下手の横好きではありますが) perl5 なら何とかなる…

そうして作られたこれが, 今の私の精いっぱいの
『熱いパトス』なんです.

御意見, 御感想をお待ちしております.
=== hkoba@profire.co.jp ----- 流しの perl5 プログラマー, 小林弘明 --/
___動け動け 動け動け 動いてよ!___今動かなきゃ 何にもならないんだ!__/
